<style>
.status_ready
{
  background:#5CB85C;
}

.status_signedout
{
  background:silver;
}

.status_recording
{
  background:#D9534F;
}

.rec_ready
{
  display: none;
}

.rec_recording
{
  display: inline-block;
}

.rec_signedout
{
  display: none;
}

</style>

<script type="text/javascript"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCVY8qaGUDSItAXOAMrpmn_cpl2aAj8Npc">
</script>
<script type="text/javascript">
// In the following example, markers appear when the user clicks on the map.
// The markers are stored in an array.
// The user can then click an option to hide, show or delete the markers.
var markers = [];
var map;
var shots = [];

Handlebars.registerHelper('shotimage', function() {
  //console.log('shot: '+this.shot + ' in '+shots.length);
  return shots[this.shot];
});

function initialize() {
  var mapOptions = {
    center: new google.maps.LatLng(-34.397, 150.644),
    zoom: 8
  };

  map = new google.maps.Map(document.getElementById("map-canvas"),mapOptions);
  //showMarkers();
}

google.maps.event.addDomListener(window, 'load', initialize);




// Add a marker to the map and push to the array.
function addMarker(location) {
  var marker = new google.maps.Marker({
    position: location,
    map: map
  });
  markers.push(marker);
  marker.setMap(map);
}

// Sets the map on all markers in the array.
function setAllMap(map) {
  if (map!=null)
  {
    var latlngbounds = new google.maps.LatLngBounds();
    for (var i = 0; i < markers.length; i++) {
      latlngbounds.extend(markers[i].position);
    }
    map.setCenter(latlngbounds.getCenter());
    map.fitBounds(latlngbounds); 
  }
}

// Removes the markers from the map, but keeps them in the array.
function clearMarkers() {
  setAllMap(null);
}

// Shows any markers currently in the array.
function showMarkers() {
  setAllMap(map);
}

// Deletes all markers in the array by removing references to them.
function deleteMarkers() {
  clearMarkers();
  markers = [];
}

    </script>

<div class="col-sm-12" id="timeline">
</div>

<div class="col-sm-12" style="padding:0;" id="map">
<div id="selectiontimeline">
</div>
<div id="map-canvas" style="height:300px;width:100%;">
</div>
</div>

<div class="col-sm-12" id="media">
</div>

<script id="selection-template" type="text/x-handlebars-template">
<div class="row" style="margin-bottom:10px;border:1px solid silver;padding:10px;margin-left:0;margin-right:0;">
    {{#each this}}
    <div style="display:relative;height:105px;padding:0;margin-right:5px;" class="col-sm-2">
    {{#if this.shot}}
      <img style="width:100%;" src="/static/data/{{shotimage}}"/>
      {{else}}
      <div style="background:#333;width:100%;height:105px;display:inline-block;"></div>
      {{/if}}
      <div style="width:20px;height:20px;border-radius:10px;background:red;position:absolute;right:5px;bottom:5px;" class="rec_{{this.status}}"></div>
<i style="position:absolute;top:5px;margin:0;left:5px;">{{this.status}}</i>
        <i class="badge primary status_{{this.status}}" style="position:absolute;bottom:0px;margin:0;left:0px;">{{this.name}}</i> &nbsp;
      </div>
    {{else}}
    <div class="text-muted" class="col-sm-12">
      No Users Signed In
    </div>    
    {{/each}}
</div>

</div>
</script>

<script id="timeline-template" type="text/x-handlebars-template">
<div class="row">
  <div class="col-sm-1" >
    {{#each this}}
    <div class="row">
      <div class="col-sm-12 nametag">
        {{this.name}}
        <i class="badge primary">{{this.status}}</i>
      </div>
    </div>
    {{else}}
    
      <div class="text-muted" class="col-sm-12">
        No Users Signed In
      </div>
    
    {{/each}}
  </div>
  <div class="col-sm-11" style="border:1px solid #eee;overflow:auto;">
  <div class="cursor">&nbsp;</div>
    <div id="mover">
      {{#each this}}
      <div class="row">
        <div class="mainrows">
          <div class="indicator" offset="{{this.offset}}">
            
            <div class="warning" length="{{this.warning}}">{{this.warning}}</div>
            <div class="live" length="{{this.live}}">{{this.live}}</div>
            <div class="shooting" length="{{this.length}}">{{this.length}}</div>
          </div>
          <div class="allocation_offset"></div>
          <div class="indicator" offset="{{this.offset}}">
            <div class="warning" length="{{this.warning}}">{{this.warning}}</div>
            <div class="live" length="{{this.live}}">{{this.live}}</div>
            <div class="shooting" length="{{this.length}}">{{this.length}}</div>
          </div>
        </div>
      </div>
      {{else}}
        <div class="col-sm-12">
          No Users Signed In
        </div>
      {{/each}}
    </div>
  </div>
</div>
</script>

<script id="media-template" type="text/x-handlebars-template">
{{#each this}}
<div style="float:left;" class="col-sm-6">
<div class="col-sm-6">
{{#if this.path}}
<a href="https://bootlegger.s3.amazonaws.com/upload/{{this.path}}" style="position:relative;display:inline-block;" data-toggle="lightbox">
  <img class="img-thumbnail" style="width:200px;height:120px;" src="{{this.thumb}}" />
  <img src="/linker/images/download.png" style="position:absolute;left:5px;bottom:5px;"/>
</a>
{{else}}
{{#if this.thumb}}
<img class="img-thumbnail" style="width:200px;height:120px;" src="{{this.thumb}}" />
{{else}}
<div class="img-thumbnail" style="width:200px;height:120px;"><span class="text-muted">Waiting for Upload</span></div>
{{/if}}
{{/if}}
<span class="text-muted">
<br>{{this.user.profile.displayName}}<br>
<small>{{this.createdAt}}</small>

</h6>
</div>
<div class="col-sm-6" style="padding:0">
    {{#each this.meta.static_meta}}
    <span class="label label-default">{{@key}}: {{this}}</span>
    {{/each}}
    {{#each this.meta.timed_meta}}
    <span class="label label-info">{{@key}}: {{this}}</span>
    {{/each}}
</div>
</div>
{{else}}
<span class="text-muted">No media produced yet</span>
{{/each}}
</script>

<style>
#timeline .col-sm-12
{
  height:60px;
}

#timeline .col-sm-12.nametag
{
  background:#eee;
  height:64px;
  border-bottom:1px solid #bbb;
}

.mainrows
{
  height:60px;
}

#mover
{
  background:url(/linker/images/timeline_b.png) repeat;
  border-left: 1px solid #eee;
  /*transition: margin-left 1s linear;*/
}

.indicator
{
margin-top:3px;
height:56px;
float:left;
}

.warning
{
  background: orange;
  height: 100%;
  float:left;
}

.live
{
  background: red;
  height: 100%;
  float:left;
}

.cursor
{
  margin-left:300px;
  width: 2px;
  background: black;
  height: 100%;
  position: absolute;
  z-index: 20;
}

.shooting
{
  float:left;
  background: green;
  height: 100%;
}

.allocation_offset
{
  float:left;
  background:silver;
  margin-top:3px;
  height:56px;
}

</style>

<script>
$(function(){

var pixsecs = 15;

var timelinetemplate;
var mediatemplate;
var selectiontemplate;

  //build handlebars templates
  var source = $("#timeline-template").html();
  timelinetemplate = Handlebars.compile(source);
  source = $("#media-template").html();
  mediatemplate = Handlebars.compile(source);
  source = $("#selection-template").html();
  selectiontemplate = Handlebars.compile(source);


  var timer = 0;
  var media = new Array();
  var mapmode = false;

  io.socket.on('message', function(response){

        if (response.data.shots != undefined)
        {
          //console.log('setting shots');
          shots = response.data.shots;
        }

          //console.log(response.data.update);
          if (response.data.media != undefined)
          {
              //new media item from this event
              //render media:
              //add media to the front of the list...
              if (response.data.update)
              {
                //find the one that matches...
                for (var i=0;i<media.length;i++)
                {
                  if (media[i].id == response.data.media.id)
                  {
                    media[i] = response.data.media;
                  }
                }

                //update whole table...
                $('#media').html(mediatemplate(media));
              }
              else
              {
                media.unshift(response.data.media);
                $('#media').html(mediatemplate(media));
              }
          }

          //add this to the log...
          if (response.data.timer != undefined)
          {
            $('#eventclock').text(response.data.timer);
            timer = response.data.timer;
          

            $('#mover').animate({marginLeft:-((pixsecs*response.data.timer) - 300)},1000,"linear");
            //$('#mover').css('margin-left',-((pixsecs*timer) - 300));
          }

          if (response.data.users != undefined)
          {
            
            //$('.mover').css('height',(3*60));
            $('#users').text(response.data.ucount);

            if (mapmode)
            {
              $('#selectiontimeline').html(selectiontemplate(response.data.users));
            }
            else
            {
              $('#timeline').html(timelinetemplate(response.data.users));

              $('.shooting').each(function()
              {
                $(this).css('width',pixsecs*($(this).attr('length')));
              });

              $('.allocation_offset').each(function()
              {
                $(this).css('width',pixsecs*1);
              });

              $('.warning').each(function()
              {
                $(this).css('width',($(this).attr('length'))* pixsecs);
              });

              $('.live').each(function()
              {
                $(this).css('width',$(this).attr('length')* pixsecs);
              });

               $('.indicator').each(function()
              {
                  var width = 0;
                   $(this).children().each(function() {
                      width += $(this).outerWidth( true );
                  });
                 $(this).css('width',width+'px');
              });

              $('.mainrows').each(function()
              {
                //console.log("offset: "+$(this).attr('offset'));
                var first = $(this).find('.indicator:first');
                first.css('margin-left',(pixsecs * (Number(first.attr('offset')))));
              });

              if (response.data.ucount)
              {
                  $('.mainrows').css('width',2*(pixsecs*response.data.users[Object.keys(response.data.users)[0]].length*(response.data.ucount+1)));
                  $('#mover').css('width',2*(pixsecs*response.data.users[Object.keys(response.data.users)[0]].length*(response.data.ucount+1)));
              }


               $('#mover').css('margin-left',-((pixsecs*timer) - 300));
             }
          }

          if (response.data.phase != undefined)
          {
            $('#mode').text(response.data.phase);
            $('#phase').text(response.data.ruleset);
            if (response.data.phase == 'selection')
            {
              $('#eventclock').parent().parent().hide();
              $('#phase').parent().parent().hide();
              $('#timeline').hide();
              $('#map').show();
              mapmode = true;
            } 
            else
            {
              $('#map').hide();
            }
          }
      });

	io.socket.on('connect',function()
	{
    //sign up for updates
		io.socket.get('/event/updates/<%= event.id%>', function(response){
      		//console.log(response);
  	});

    io.socket.get('/media/event/<%= event.id%>', function(response){
          //console.log(response); 
          media = response;
          $('#media').html(mediatemplate(media));
          deleteMarkers();
          $.each(media,function(u)
          {
            if (media[u].meta.static_meta.gps_lat != undefined)
            {
              addMarker(new google.maps.LatLng(media[u].meta.static_meta.gps_lat,media[u].meta.static_meta.gps_lng));
            }
          });
          showMarkers();
      });

		
	});
});
</script>